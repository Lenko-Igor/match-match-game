(()=>{"use strict";var t={323:(t,e,n)=>{n.r(e)},663:(t,e,n)=>{n.r(e)},954:(t,e,n)=>{n.r(e)},734:(t,e,n)=>{n.r(e)},220:(t,e,n)=>{n.r(e)},70:(t,e,n)=>{n.r(e)},476:(t,e,n)=>{n.r(e)},776:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(){}return t.prototype.createElement=function(t,e,n){var o,i=document.createElement(t);return e.length&&(o=i.classList).add.apply(o,e),n&&(i.id=n),i},t}();e.default=n},979:function(t,e,n){var o,i=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),n(323);var a=function(t){function e(){var e=t.call(this)||this;return e.date=[{point:"1",text:"Register new player in game",class:"image1"},{point:"2",text:"Configure your game settings",class:"image2"},{point:"3",text:"Start you new game! Remember card positions and match it before times up.",class:"image3"}],e}return i(e,t),e.prototype.getPage=function(){return this.createMain()},e.prototype.createMain=function(){var t=this.createElement("main",["main"],""),e=this.createElement("div",["container","main-container"],""),n=this.createElement("div",["wrap-content"],"");return n.innerHTML=this.createContent(this.date),e.append(n),t.append(e),t},e.prototype.createContent=function(t){return'<h2 class="content-title">How to play?</h2>'+t.map((function(t){return'\n      <div class="content-feild">\n        <div class="content-row">\n          <div class="content-row__left">\n            <div class="point">\n              <p>'+t.point+"</p>\n            </div>\n            <p>"+t.text+'</p>\n          </div>\n          <div class="content-row__right '+t.class+'"></div>\n        </div>\n      </div>\n      '})).join("")},e}(r(n(776)).default);e.default=a},123:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(){this.db,this.openRequest(),this.dataAllPersons=[]}return t.prototype.openRequest=function(){var t=this,e=indexedDB.open("Lenko-Igor",1);e.onupgradeneeded=function(t){var e=t.target.result;e.objectStoreNames.contains("people")||e.createObjectStore("people")},e.onsuccess=function(e){var n=e.target;t.db=n.result,t.getAllPersons()},e.onerror=function(t){return console.log("Error:",t)}},t.prototype.addPerson=function(t){if(this.db){var e=this.db.transaction(["people"],"readwrite").objectStore("people").add(t,t.email);e.onerror=function(t){console.log("error",t)},e.onsuccess=function(t){console.log("it is good")}}},t.prototype.getAllPersons=function(){var t=this,e=[];if(this.db){var n=this.db.transaction(["people"],"readwrite").objectStore("people").openCursor();n.onsuccess=function(o){var i=n.result;i&&(e.push(i.value),i.continue()),t.dataAllPersons=e}}},t.prototype.upDatePerson=function(t){if(this.db){var e=this.db.transaction(["people"],"readwrite").objectStore("people").openCursor();e.onsuccess=function(n){var o=e.result;if(o){if(o.value.email===t.email){var i=o.update(t);i.onsuccess=function(t){console.log("update success!!")},i.onerror=function(t){console.log("update failed!!")}}o.continue()}}}},t}();e.default=n},811:function(t,e,n){var o,i=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),n(663);var a=r(n(776)),s=r(n(240)),l=function(t){function e(){var e=t.call(this)||this;return e.props=[],e.timer=new s.default,e}return i(e,t),e.prototype.getPage=function(t,e){return this.props=t,this.createGame(e)},e.prototype.createFeildGame=function(t){var e=this.createElement("div",["cards-feild"],"");return e.append(this.createCards(t)),e},e.prototype.createCards=function(t){var e=this,n=this.createElement("div",["card-container",t],""),o=this.props.map((function(t){return e.createCard(t)})).join("");return n.innerHTML=o,n},e.prototype.createCard=function(t){return'\n    <div style="perspective: 25rem">\n      <div class="card-wrap" data-value='+t+'>\n        <div class="card back"></div>\n        <div class="card front" \n            style="background: url(\'../src/images/game/'+t+"') no-repeat center;\n            background-size: cover;\">\n        </div>\n      </div>\n    </div>\n    "},e.prototype.createGame=function(t){var e=this.createElement("main",["main"],""),n=this.createElement("div",["wrap-content"],"");return n.append(this.timer.createHTMLElementTimer()),n.append(this.createFeildGame(t)),e.append(n),e},e.prototype.toRotateCard=function(t){(null==t?void 0:t.classList.contains("rotate"))&&(null==t||t.classList.toggle("rotate"))},e.prototype.toRotateAllcards=function(t){null==t||t.classList.toggle("rotate")},e.prototype.getResultSelectCards=function(t){var e=this;t.forEach((function(t){e.toRotateAllcards(t)}))},e}(a.default);e.default=l},922:function(t,e,n){var o,i=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),n(954);var a=function(t){function e(){var e=t.call(this)||this;return e.feild=e.createElement("header",["header"],""),e.container=e.createContainer(),e.logo=e.createLogo(),e.menu=e.createMenu(),e.name=e.createElement("p",["first-name","hidden"],"firstName"),e.button=e.createButton(),e}return i(e,t),e.prototype.getHeader=function(){return this.toPlaceElements(this.container,[this.logo,this.menu,this.button]),this.toPlaceElements(this.feild,[this.container]),this.feild},e.prototype.createContainer=function(){return this.createElement("div",["container","header-container"],"")},e.prototype.createLogo=function(){var t=this.createElement("div",["header-logo"],"");return t.innerHTML='\n      <div class="logo-up">\n        <p class="logo-text">MATCH</p>\n      </div>\n      <div class="logo-down">\n        <p class="logo-text">MATCH</p>\n      </div>\n    ',t},e.prototype.createMenu=function(){var t=this.createElement("menu",["menu"],"");return t.innerHTML='\n      <ul class="header-menu__items">\n        <li class="header-menu__item item-about item-select">\n          <div class="header-menu__img"><p>?</p></div>\n          <p class="header-menu__text">About Game</p>  \n        </li>\n        <li class="header-menu__item item-score">\n          <div class="header-menu__img"></div>\n          <p class="header-menu__text">Best Score</p> \n        </li>\n        <li class="header-menu__item item-setting">\n          <div class="header-menu__img"></div>\n          <p class="header-menu__text">Game Settings</p>\n        </li>\n      </ul>\n    ',t},e.prototype.createButton=function(){var t=this.createElement("div",["header-button-feild"],""),e=this.createElement("button",["header-button","header-button-start","hidden"],"startGame"),n=this.createElement("button",["header-button"],"regBtn");return e.innerHTML='\n      <p class="header-button__text">start game</p>\n    ',n.innerHTML='\n      <p class="header-button__text">register new player</p>\n    ',t.append(this.name),t.append(e),t.append(n),t},e.prototype.toPlaceElements=function(t,e){e.forEach((function(e){return t.append(e)}))},e}(r(n(776)).default);e.default=a},245:function(t,e,n){var o,i=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),n(734);var a=function(t){function e(){var e=t.call(this)||this;return e.backgroundFon=e.createElement("div",["modal-fon"],""),e.modalRegistrationBlock=e.createElement("section",["modal-registration-block"],""),e.modalWinBlock=e.createElement("section",["modal-win-block"],""),e.titleWinBlock=e.createElement("h2",["modal-win-title"],""),e.modalWindow=e.buildModal(),e.score=0,e}return i(e,t),e.prototype.createInputForm=function(){return'\n      <form class="modal-form">\n        <div class="form-block">\n          <label for="firstName" class="modal-form__label">First Name</label>\n          <input type="text" class="modal-form__input" name="firstName" id="firstName" required placeholder="..." value="">     \n          <div class="form-block__check error"></div>   \n        </div>\n        <div class="form-block">\n          <label for="lastName" class="modal-form__label">Last Name</label>\n          <input type="text" class="modal-form__input" name="lastName" id="lastName" required placeholder="...">   \n          <div class="form-block__check error"></div>      \n        </div>\n        <div class="form-block">\n          <label for="email" class="modal-form__label">E-mail</label>\n          <input type="email" class="modal-form__input" name="email" id="email" required placeholder="..."> \n          <div class="form-block__check error"></div>        \n        </div>\n      </form>\n    '},e.prototype.createRegistrationBlock=function(){return this.modalRegistrationBlock.innerHTML='\n      <header class="modal-header">\n        <h2>Registr new Player</h2>\n      </header>\n      <main class="modal-main">\n        '+this.createInputForm()+'\n        <div class="modal-avatar"></div>\n      </main>\n      <footer class="modal-footer">\n        <button id="add" class="add disabled"><p>add user</p></button>\n        <button id="cancel" class="cancel"><p>cancel</p></button>\n      </footer>\n    ',this.modalRegistrationBlock},e.prototype.createWinBlock=function(){return this.modalWinBlock.innerHTML='\n      <p class="win-text">Congratulations! You successfully found all matches.</p>\n      <button class="win-button" id="win">\n        <p class="win-button__text">OK</p>\n      </button>\n    ',this.modalWinBlock.prepend(this.titleWinBlock),this.modalWinBlock},e.prototype.buildModal=function(){return this.backgroundFon.append(this.createRegistrationBlock()),this.backgroundFon.append(this.createWinBlock()),this.backgroundFon},e.prototype.openModalRegistration=function(){this.backgroundFon.classList.add("modal-fon_active"),this.modalRegistrationBlock.classList.add("active")},e.prototype.closeModalRegistration=function(){this.backgroundFon.classList.remove("modal-fon_active"),this.modalRegistrationBlock.classList.remove("active")},e.prototype.openModalWin=function(t){this.titleWinBlock.innerHTML="\n    You score: \n    <span>"+t+"</span>\n    ",this.backgroundFon.classList.add("modal-fon_active"),this.modalWinBlock.classList.add("active")},e.prototype.closeModalWin=function(){this.backgroundFon.classList.remove("modal-fon_active"),this.modalWinBlock.classList.remove("active")},e}(r(n(776)).default);e.default=a},861:function(t,e,n){var o,i=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),n(220);var a=function(t){function e(){return t.call(this)||this}return i(e,t),e.prototype.getPage=function(t){return this.createMain(t)},e.prototype.createMain=function(t){var e=this.createElement("main",["main"],""),n=this.createElement("div",["container","main-container"],""),o=this.createElement("div",["wrap-content"],"wrap-score");return o.append(this.createTittle()),o.append(this.createListScore(t)),n.append(o),e.append(n),e},e.prototype.createTittle=function(){var t=this.createElement("h2",["score-title"],"");return t.innerHTML="Best players",t},e.prototype.createListScore=function(t){var e=this.createElement("ul",["score-list"],""),n=t.slice(0).sort((function(t,e){var n=0;return t.score&&e.score&&(n=t.score-e.score),n})).reverse().splice(0,10).map((function(t){return'\n        <li class="item">\n          <div class="item__person">\n            <p class="item__person-name">'+t.firstName+" "+t.lastName+'</p>\n            <p class="item__person-email">'+t.email+'</p>\n          </div>\n          <p class="item__score">Score: <span>'+t.score+"</span></p>\n        </li>\n      "})).join("");return e.innerHTML=n,e},e}(r(n(776)).default);e.default=a},608:function(t,e,n){var o,i=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),n(70);var a=function(t){function e(){var e=t.call(this)||this;return e.difficulty="easy",e.typeCards="auto",e}return i(e,t),e.prototype.getPage=function(){return this.createMain()},e.prototype.createMain=function(){var t=this,e=this.createElement("main",["main"],""),n=this.createElement("div",["container","main-container"],""),o=this.createElement("div",["setting-content"],""),i=this.createElement("h2",["setting-title"],""),r=this.createElement("form",["setting-feild"],""),a=this.createElement("h2",["setting-title"],""),s=this.createElement("form",["setting-feild"],"");return i.innerHTML="Difficulty",a.innerHTML="Game cards",["easy","middle","difficult"].forEach((function(e){r.append(t.creteDifficultyBlock(e))})),["auto","animal"].forEach((function(e){s.append(t.createTypeCardsBlock(e))})),o.append(i),o.append(r),o.append(a),o.append(s),n.append(o),e.append(n),e},e.prototype.creteDifficultyBlock=function(t){var e=this,n=this.createElement("div",["setting-select__wrap"],""),o=this.createElement("label",["setting-select__title"],""),i=this.createElement("input",["setting-select"],t);return o.setAttribute("for",t),o.innerHTML=t,i.setAttribute("name","difficulty"),i.setAttribute("type","radio"),i.id=t,i.addEventListener("change",(function(){e.difficulty=i.id})),t===this.difficulty&&i.setAttribute("checked","checked"),n.append(o),n.append(i),n},e.prototype.createTypeCardsBlock=function(t){var e=this,n=this.createElement("div",["setting-select__wrap"],""),o=this.createElement("label",["setting-select__title"],""),i=this.createElement("input",["setting-select"],t);return o.setAttribute("for",t),o.innerHTML=t,i.setAttribute("name","images"),i.setAttribute("type","radio"),i.id=t,i.addEventListener("change",(function(){e.typeCards=i.id})),t===this.typeCards&&i.setAttribute("checked","checked"),n.append(o),n.append(i),n},e.prototype.getValueDifficulty=function(){return this.difficulty},e.prototype.getTypeCards=function(){return this.typeCards},e}(r(n(776)).default);e.default=a},240:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(){this.valueTimer=0,this.minutes=0,this.seconds=0,this.timerFeild=document.createElement("div"),this.timerHTML=document.createElement("p")}return t.prototype.createHTMLElementTimer=function(){return this.timerFeild.className="timer",this.timerHTML.className="timer-text",this.showTimerValue(this.minutes,this.seconds),this.timerFeild.append(this.timerHTML),this.timerFeild},t.prototype.showTimerValue=function(t,e){var n=t<10?"0"+t:""+t,o=e<10?"0"+e:""+e;this.timerHTML.innerHTML=n+":"+o},t.prototype.startTimer=function(){var t=this;this.valueTimer=0,this.showTimerValue(this.minutes,this.seconds),this.startTimerInterval=setInterval((function(){t.valueTimer++,t.minutes=Math.floor(t.valueTimer/60),t.seconds=t.valueTimer-60*t.minutes,t.showTimerValue(t.minutes,t.seconds)}),1e3)},t.prototype.stopTimer=function(){this.startTimerInterval&&clearInterval(this.startTimerInterval)},t}();e.default=n},303:function(t,e,n){var o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),n(476);var i=o(n(114)),r=o(n(776));window.onload=function(){var t=(new r.default).createElement("div",[],"app");document.body.prepend(t),i.default(t)}},114:function(t,e,n){var o=this&&this.__awaiter||function(t,e,n,o){return new(n||(n=Promise))((function(i,r){function a(t){try{l(o.next(t))}catch(t){r(t)}}function s(t){try{l(o.throw(t))}catch(t){r(t)}}function l(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}l((o=o.apply(t,e||[])).next())}))},i=this&&this.__generator||function(t,e){var n,o,i,r,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(i=2&r[0]?o.return:r[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,r[1])).done)return i;switch(o=0,i&&(r=[2&r[0],i.value]),r[0]){case 0:case 1:i=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,o=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==r[0]&&2!==r[0])){a=0;continue}if(3===r[0]&&(!i||r[1]>i[0]&&r[1]<i[3])){a.label=r[1];break}if(6===r[0]&&a.label<i[1]){a.label=i[1],i=r;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(r);break}i[2]&&a.ops.pop(),a.trys.pop();continue}r=e.call(t,a)}catch(t){r=[6,t],o=0}finally{n=i=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}},r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var a=r(n(776)),s=r(n(922)),l=r(n(979)),c=r(n(861)),u=r(n(608)),d=r(n(245)),p=r(n(811)),h=r(n(123));e.default=function(t){var e=function(){function t(t){this.app=t,this.modalFeild=(new a.default).createElement("div",["modal-feild"],""),this.ModalWindow=new d.default,this.modalWindow=this.ModalWindow.modalWindow,this.header=new s.default,this.AboutPage=(new l.default).getPage(),this.ScorePage=new c.default,this.Settings=new u.default,this.Game=new p.default,this.init()}return t.prototype.init=function(){this.modalFeild.append(this.modalWindow),this.app.before(this.modalFeild)},t.prototype.showFirstPage=function(){this.app.append(this.header.getHeader()),this.app.append(this.AboutPage)},t.prototype.openSelectedPage=function(t,e){this.header.menu.querySelectorAll(".header-menu__item").forEach((function(t){return t.classList.remove("item-select")})),t.classList.add("item-select"),t.classList.contains("item-about")&&this.showPage(this.AboutPage),t.classList.contains("item-score")&&e&&this.showPage(this.ScorePage.getPage(e)),t.classList.contains("item-setting")&&this.showPage(this.Settings.getPage())},t.prototype.openScorePage=function(t){t&&this.showPage(this.ScorePage.getPage(t))},t.prototype.showModalWindow=function(t,e){t&&e?this.ModalWindow.openModalWin(e):this.ModalWindow.openModalRegistration()},t.prototype.hiddenModalWindow=function(t){if(t)this.ModalWindow.closeModalWin();else{var e=document.querySelector(".modal-fon"),n=null==e?void 0:e.querySelectorAll("input");this.ModalWindow.closeModalRegistration(),null==n||n.forEach((function(t){var e;t.value="",null===(e=t.nextElementSibling)||void 0===e||e.classList.add("error")}))}},t.prototype.showStartGameButton=function(){var t=this.app.querySelector("#regBtn"),e=this.app.querySelector("#startGame");null==t||t.classList.add("hidden"),null==e||e.classList.remove("hidden")},t.prototype.showStartStopGameButton=function(t,e){var n=this.app.querySelector(".header-button-start");if(n){n.id=t;var o=n.firstElementChild;o&&(o.innerHTML=e)}},t.prototype.showAvatarName=function(t){this.header.name.innerHTML=t,this.header.name.classList.toggle("hidden")},t.prototype.showStatusInput=function(t,e){var n,o,i=this.modalWindow.querySelector("#"+t);e?null===(n=null==i?void 0:i.nextElementSibling)||void 0===n||n.classList.remove("error"):null===(o=null==i?void 0:i.nextElementSibling)||void 0===o||o.classList.add("error")},t.prototype.showStylesdAddButton=function(t){var e=document.querySelector("#add");if(!e)throw"error";t?(e.classList.add("disabled"),e.classList.remove("active")):(e.classList.remove("disabled"),e.classList.add("active"))},t.prototype.showGamePage=function(t,e){var n;null===(n=this.app.lastElementChild)||void 0===n||n.replaceWith(this.Game.getPage(t,e))},t.prototype.showPage=function(t){var e;null===(e=this.app.lastElementChild)||void 0===e||e.replaceWith(t)},t.prototype.showRotate=function(t){this.Game.toRotateCard(t)},t.prototype.showResultSelect=function(t){this.Game.getResultSelectCards(t)},t.prototype.rotateAllCards=function(){var t=this;this.app.querySelectorAll(".card-wrap").forEach((function(e){t.Game.toRotateAllcards(e)}))},t.prototype.showStartTimer=function(){this.Game.timer.startTimer()},t.prototype.showStopTimer=function(){this.Game.timer.stopTimer()},t}(),n=function(){function t(t){this.view=t,this.regData={firstName:"",lastName:"",email:""},this.arrElementsPressed=[],this.imagesForGame=[],this.settingData={},this.difficulty=this.view.Settings.getValueDifficulty(),this.itemsForScore={amountAllCards:0,amountOpenedCards:0,amountAllCompareCards:0,amountFatalCompareCards:0,timer:0},this.score=0,this.dataBase=new h.default,this.init(),this.getDataSettings()}return t.prototype.init=function(){this.getLoadFirstPage()},t.prototype.getLoadFirstPage=function(){this.view.showFirstPage()},t.prototype.selectMenu=function(t){this.getStopGame(),t.classList.contains("item-score")?this.view.openSelectedPage(t,this.dataBase.dataAllPersons):this.view.openSelectedPage(t)},t.prototype.closeModalWindow=function(t){t&&(this.regData.firstName="",this.regData.lastName="",this.regData.email="",this.getStatusDisabledButton(!0)),this.view.hiddenModalWindow()},t.prototype.closeModalWin=function(){this.view.hiddenModalWindow("win"),this.view.openScorePage(this.dataBase.dataAllPersons)},t.prototype.openModalWindow=function(){this.view.showModalWindow()},t.prototype.checkValueInput=function(t,e){"firstName"!==t&&"lastName"!==t||(/^[a-zA-Zа-яА-Я]+$/iu.test(e)?(this.regData[t]=e,this.view.showStatusInput(t,!0)):(this.regData[t]="",this.view.showStatusInput(t,!1))),"email"===t&&(/^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(e)?(this.regData[t]=e,this.view.showStatusInput(t,!0)):(this.regData[t]="",this.view.showStatusInput(t,!1))),this.checkValueData()?this.getStatusDisabledButton(!1):this.getStatusDisabledButton(!0)},t.prototype.checkValueData=function(){var t=!1;return this.regData.firstName&&this.regData.lastName&&this.regData.email&&(t=!t),t},t.prototype.getStatusDisabledButton=function(t){this.view.showStylesdAddButton(t)},t.prototype.checkRegistrationData=function(){this.checkValueData()&&(this.closeModalWindow(),this.view.showStartGameButton(),this.view.showAvatarName(this.regData.firstName))},t.prototype.getStartGame=function(){var t=this;this.imagesForGame=this.getPropsForGame(this.settingData,this.view.Settings.getValueDifficulty(),this.view.Settings.getTypeCards()),this.view.showGamePage(this.imagesForGame,this.view.Settings.getValueDifficulty()),this.view.showStartTimer(),this.view.showStartStopGameButton("stopGame","stop game"),this.itemsForScore.amountAllCards=this.imagesForGame.length,this.itemsForScore.amountOpenedCards=0,this.itemsForScore.amountAllCompareCards=0,this.itemsForScore.amountFatalCompareCards=0,this.itemsForScore.timer=0,setTimeout((function(){t.view.rotateAllCards()}),3e4)},t.prototype.getStopGame=function(t){if(this.arrElementsPressed=[],this.view.showStartStopGameButton("startGame","start game"),this.view.showStopTimer(),this.itemsForScore.timer=this.view.Game.timer.valueTimer,t){this.score=100*(this.itemsForScore.amountAllCompareCards-this.itemsForScore.amountFatalCompareCards)-10*this.itemsForScore.timer;var e={firstName:this.regData.firstName,lastName:this.regData.lastName,email:this.regData.email,score:this.score};this.checkInDataBasePerson(e)?this.dataBase.upDatePerson(e):this.dataBase.addPerson(e),this.dataBase.getAllPersons(),this.view.showModalWindow("win",this.score)}},t.prototype.checkInDataBasePerson=function(t){var e=!1;return this.dataBase.dataAllPersons.forEach((function(n){t.email===n.email&&(e=!0)})),e},t.prototype.getDataSettings=function(){return o(this,void 0,void 0,(function(){var t;return i(this,(function(e){switch(e.label){case 0:return[4,fetch("../setting.json")];case 1:return[4,e.sent().json()];case 2:return t=e.sent(),this.settingData=t,[2]}}))}))},t.prototype.getPropsForGame=function(t,e,n){var o=t.difficulty[e],i=t.images[n].slice(0,o);return i.map((function(t){return i})).reduce((function(t,e){return t.concat(e)}),[]).sort((function(){return Math.random()-.5}))},t.prototype.toRotateCard=function(t){this.view.showRotate(t),this.toFillarrElementsPressed(t)},t.prototype.toFillarrElementsPressed=function(t){this.arrElementsPressed.length<=1&&(this.arrElementsPressed.push(t),this.checkElementsPressed(this.arrElementsPressed))},t.prototype.checkElementsPressed=function(t){var e=this;2===t.length&&(this.itemsForScore.amountAllCompareCards++,t[0].dataset.value!==t[1].dataset.value?(this.itemsForScore.amountFatalCompareCards++,setTimeout((function(){e.view.showResultSelect(t),e.arrElementsPressed=[]}),500)):(this.itemsForScore.amountOpenedCards+=2,this.arrElementsPressed=[],this.itemsForScore.amountOpenedCards===this.itemsForScore.amountAllCards&&this.getStopGame("win")))},t}();new(function(){function t(t,e){this.app=t,this.model=e,this.init()}return t.prototype.init=function(){var t=this,e=document.querySelector(".modal-feild"),n=document.querySelector("#add"),o=document.querySelector("#win"),i=document.querySelector("#cancel"),r=this.app.querySelector("#regBtn"),a=null==e?void 0:e.querySelectorAll("input"),s=this.app.querySelectorAll(".header-menu__item");null==n||n.addEventListener("click",(function(){t.clickAddBtnModal();var e=t.app.querySelector(".header-button-start");null==e||e.addEventListener("click",(function(){"startGame"!==e.id?"stopGame"!==e.id||t.clickStopGame():t.clickStartGame()}))})),null==i||i.addEventListener("click",(function(){t.clickCancelBtnModal()})),null==o||o.addEventListener("click",(function(){t.clickWinBtnModal()})),null==a||a.forEach((function(e){e.addEventListener("change",(function(){t.getParametrsInput(e.id,e.value)}))})),s.forEach((function(e){e.addEventListener("click",(function(){t.clickMenuButton(e)}))})),null==r||r.addEventListener("click",(function(){t.clickNewPlayerBtn()}))},t.prototype.clickMenuButton=function(t){this.model.selectMenu(t)},t.prototype.clickNewPlayerBtn=function(){this.model.openModalWindow()},t.prototype.clickCancelBtnModal=function(){this.model.closeModalWindow("deleteData")},t.prototype.clickAddBtnModal=function(){this.model.checkRegistrationData()},t.prototype.clickWinBtnModal=function(){this.model.closeModalWin()},t.prototype.getParametrsInput=function(t,e){this.model.checkValueInput(t,e)},t.prototype.clickStartGame=function(){var t=this;this.model.getStartGame(),document.querySelectorAll(".card-wrap").forEach((function(e){e.addEventListener("click",(function(){e.classList.contains("rotate")&&t.model.toRotateCard(e)}))}))},t.prototype.clickStopGame=function(){this.model.getStopGame()},t}())(t,new n(new e(t)))}}},e={};function n(o){var i=e[o];if(void 0!==i)return i.exports;var r=e[o]={exports:{}};return t[o].call(r.exports,r,r.exports,n),r.exports}n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n(303)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,